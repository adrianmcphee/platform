# Generated by Django 5.1.1 on 2024-10-11 18:10

import apps.common.fields
import apps.security.managers
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("commerce", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlacklistedUsername",
            fields=[
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "db_table": "black_listed_usernames",
            },
        ),
        migrations.CreateModel(
            name="ProductRoleAssignment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                (
                    "role",
                    models.CharField(
                        choices=[("Contributor", "Contributor"), ("Manager", "Manager"), ("Admin", "Admin")],
                        default="Contributor",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SignInAttempt",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                ("device_identifier", models.CharField(blank=True, max_length=64, null=True)),
                ("successful", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SignUpRequest",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                ("device_identifier", models.CharField(blank=True, max_length=64, null=True)),
                ("verification_code", models.CharField(max_length=6)),
                ("successful", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                ("remaining_budget_for_failed_logins", models.PositiveSmallIntegerField(default=3)),
                ("password_reset_required", models.BooleanField(default=False)),
                ("is_test_user", models.BooleanField(default=False, verbose_name="Test User")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", apps.security.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationPersonRoleAssignment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("id", apps.common.fields.Base58UUIDField(primary_key=True, serialize=False)),
                (
                    "role",
                    models.CharField(
                        choices=[("Owner", "Owner"), ("Manager", "Manager"), ("Member", "Member")],
                        default="Member",
                        max_length=255,
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="commerce.organisation"),
                ),
            ],
        ),
    ]
